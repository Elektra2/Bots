#–ò–º–ø–æ—Ä—Ç—ã
from keyboards.materials.show_list import offers_kb
from aiogram import types
from config.bot_config import dp, bot
from aiogram.dispatcher import FSMContext
from bd_handlers.materials.change_test import change_test
from bd_handlers.materials.get_post import get_posts
from bd_handlers.materials.get_user import get_user
from bd_handlers.materials.get_test import get_post_name
from aiogram.dispatcher.filters.state import State, StatesGroup
from keyboards.test.back_to_user_menu import user_panel_back_to_main_menu
import random


class FSM_show_post(StatesGroup):
    user = State()
    cur_list = State()
    post_name = State()
    post = State()
    tst = State()
    question =State()
    list = State()
    score = State()

@dp.callback_query_handler(text='show_material')
async def materials(callback_query: types.CallbackQuery, state=FSMContext):
    users = await get_user(callback_query.from_user.id)
    await FSM_show_post.user.set()
    await state.update_data(post_name = 0)
    mat_btn = types.InlineKeyboardMarkup()
    if users['see_post'] == 1 and users['test_comp'] == 0:
        mat_btn.row(types.InlineKeyboardButton('See materialsüîé',callback_data='materials'),types.InlineKeyboardButton('Testüßë‚Äçüíª',callback_data='test'))
    else: mat_btn.row(types.InlineKeyboardButton('See materialsüîé',callback_data='materials'))
    mat_btn.row(types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',callback_data='main_user_menu'))
    await bot.delete_message(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id)
    await bot.send_message(chat_id=callback_query.from_user.id,
                                text="–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–æ–∂–∞—Ç—å—Å—è –≤—Å–µ –≤–∞—à–∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã", 
                                reply_markup=mat_btn)



#–í —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query_handler(text='materials',state=FSM_show_post.user)
async def post_list(callback_query: types.CallbackQuery, state=FSMContext ,n=5):
    users = await get_user(callback_query.from_user.id)
    data = await state.get_data()
    post = []
    if users['post_comp_basic'] != None:
        s = list(users['post_comp_basic'].split(','))
        for i in s:
            list1 = await get_posts(i,"basic")
            post = [*list1,*post]
    if users['post_comp_plus'] != None:
        s = list(users['post_comp_plus'].split(','))
        for i in s:
            list1 = await get_posts(i,"plus")
            post = [*list1,*post]
    new_post = await get_posts(users['score'],"basic")
    id = users["post_id_basic"]
    for i in range(len(new_post)-1,-1,-1):
         if new_post[i]['post_lvl_id'] <= id:
            post.insert(0,new_post[i])
    new_post = await get_posts(users['score'],"plus")
    id = users["post_id_plus"]
    for i in range(len(new_post)-1,-1,-1):
         if new_post[i]['post_lvl_id'] <= id:
            post.insert(0,new_post[i])
    comp = [True for i in range(len(post))]
    if len(comp) == 0:
        await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
        await bot.send_message(chat_id=callback_query.from_user.id,
                                text="–ò–∑–≤–µ–Ω–∏—Ç–µ, —É –º–µ–Ω—è –¥–ª—è –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π.", 
                                reply_markup=user_panel_back_to_main_menu)
    else:
        if users['test_comp'] == 0: comp[0] = False
        posts = {'posts':post,'comp':comp}
        await FSM_show_post.next()
        await state.update_data(cur_list = n)
        if data['post_name'] == 1:
            mes = data['post']
            for i in mes:
                await bot.delete_message(chat_id=callback_query.from_user.id,
                                message_id=i)
            await state.update_data(post_name = 0)
            await state.update_data(post = [])
            await bot.send_message(chat_id=callback_query.from_user.id,
                                    text="–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", 
                                    reply_markup=offers_kb(posts, n))
        else:   
            await bot.delete_message(chat_id=callback_query.from_user.id,
                                message_id=callback_query.message.message_id)
            await bot.send_message(chat_id=callback_query.from_user.id,
                                    text="–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:", 
                                    reply_markup=offers_kb(posts, n))


@dp.callback_query_handler(lambda c: c.data.endswith("_offers"), state=FSM_show_post.cur_list)#—á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, —É –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–µ –≤ –∫–∞–ª–ª–±—ç–∫ –¥–∞—Ç–µ –±—ã–ª–æ –¥–æ–ø–∏—Å–∞–Ω–æ _offers, —á—Ç–æ –º—ã –∑–¥–µ—Å—å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º. –ê —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ state=cur_list(–∑–∞—Å–µ—Ç–∏–ª–∏ –µ–≥–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏)
async def offers_process(callback_query:types.CallbackQuery, state:FSMContext):
    data = await state.get_data()
    users = await get_user(callback_query.from_user.id)
    match callback_query.data.replace("_offers", ""):
        case "forward":
            _cur_list = data.get("cur_list") + 5#–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤–ø–µ—Ä–µ–¥, –∑–Ω–∞—á–∏—Ç –∫ –∂–µ–ª–∞–µ–º–æ–º—É –∏–Ω–¥–µ–∫—Å—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 10
        case "back":
            _cur_list = data.get("cur_list") - 5#–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ, —Ç–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å –æ—Ç–Ω–∏–º–∞–µ–º
    
    post = []
    if users['post_comp_basic'] != None:
        s = list(users['post_comp_basic'].split(','))
        for i in s:
            list1 = await get_posts(i,"basic")
            post = [*list1,*post]
    if users['post_comp_plus'] != None:
        s = list(users['post_comp_plus'].split(','))
        for i in s:
            list1 = await get_posts(i,"plus")
            post = [*list1,*post]
    new_post = await get_posts(users['score'],"basic")
    id = users["post_id_basic"]
    for i in range(len(new_post)-1,-1,-1):
         if new_post[i]['post_lvl_id'] <= id:
            post.insert(0,new_post[i])
    new_post = await get_posts(users['score'],"plus")
    id = users["post_id_plus"]
    for i in range(len(new_post)-1,-1,-1):
         if new_post[i]['post_lvl_id'] <= id:
            post.insert(0,new_post[i])
    comp = [True for i in range(len(post))]
    if users['test_comp'] == 0: comp[0] = False
    posts = {'posts':post,'comp':comp}
    await state.update_data(cur_list = _cur_list)#–≤–Ω–æ—Å–∏–º –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
    await callback_query.message.edit_reply_markup(offers_kb(posts, _cur_list))#–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –Ω–µ –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –ø—Ä–æ—Å—Ç–æ –∏–∑–º–µ–Ω—è–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

@dp.callback_query_handler(text='test',state=FSM_show_post.user)
async def post_list(callback_query: types.CallbackQuery, state=FSMContext ,n=5):
    users = await get_user(callback_query.from_user.id)
    await FSM_show_post.question.set()
    post_id = 'post_id_'+users['user_role']
    test = eval(await get_post_name(post_for=users['user_role'],post_lvl=users['score'],post_id=users[post_id]))
    await state.update_data(question = 0)
    await state.update_data(score = 0)
    await state.update_data(list = random.sample(test[0],10))
    await state.update_data(tst = test[1][0])
    data = await state.get_data()
    await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
    #–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    test_options = types.InlineKeyboardMarkup()
    otv = data['list'][data['question']]['options']
    for i in range(len(otv)):
        if i == data['list'][data['question']]['answer']:
            test_options.row( types.InlineKeyboardButton(otv[i], callback_data='options_correct'))
        else:
            test_options.row( types.InlineKeyboardButton(otv[i], callback_data='options_incorrect'))
    await bot.send_photo(chat_id=callback_query.from_user.id, photo=data['list'][data['question']]['photo'], caption=f"–í–æ–ø—Ä–æ—Å 1/{len(data['list'])}:\n{data['list'][data['question']]['question']}",
                           reply_markup=test_options)


@dp.callback_query_handler(lambda c: c.data.startswith("options_"), state=FSM_show_post.question)
async def offer_process(callback_query:types.CallbackQuery, state:FSMContext):
    data = await state.get_data()
    otv = callback_query.data.replace("options_", "")
    score = data['score']+data['list'][data['question']]['points']
    if otv == 'correct': await state.update_data(score = score)
    next_q = data['question']+1
    await state.update_data(question = next_q)
    if next_q != len(data['list']):
        test_options = types.InlineKeyboardMarkup()
        otv = data['list'][next_q]['options']
        for i in range(len(otv)):
            if i == data['list'][next_q]['answer']:
                test_options.row( types.InlineKeyboardButton(otv[i], callback_data='options_correct'))
            else:
                test_options.row( types.InlineKeyboardButton(otv[i], callback_data='options_incorrect'))
        await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
        await bot.send_photo(chat_id=callback_query.from_user.id, photo=data['list'][next_q]['photo'], caption=f"–í–æ–ø—Ä–æ—Å {next_q+1}/{len(data['list'])}:\n{data['list'][next_q]['question']}",
                           reply_markup=test_options)
    else:
        s = score
        await state.finish()
        await bot.delete_message(chat_id=callback_query.from_user.id,
                             message_id=callback_query.message.message_id)
        if s < data['tst']*10:
            await bot.send_message(chat_id=callback_query.from_user.id,
                                text=f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑ –∏ –Ω–∞–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º {data['tst']*100}% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –±–∞–ª–ª–æ–≤, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —É—Ä–æ–∫. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å - {s/10*100}%.", 
                                reply_markup=user_panel_back_to_main_menu)
        else:
            await change_test(callback_query.from_user.id)
            await bot.send_message(chat_id=callback_query.from_user.id,
                                text=f"Well done! –í—ã –ø—Ä–æ—à–ª–∏ —É—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ!",
                                reply_markup=user_panel_back_to_main_menu)